// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  follows       Follow[]
  notifications Notification[]

  @@map("users")
}

model Movie {
  id           Int      @id // TMDB ID
  title        String
  posterPath   String?  @map("poster_path")
  releaseDate  String?  @map("release_date") // ISO date string
  overview     String?
  genres       Json?
  popularity   Float?
  voteAverage  Float?   @map("vote_average")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  releaseDates  ReleaseDate[]
  follows       Follow[]
  notifications Notification[]

  @@map("movies")
}

model ReleaseDate {
  id           String   @id @default(uuid())
  movieId      Int      @map("movie_id")
  country      String   // ISO country code (e.g., "US")
  releaseType  Int      @map("release_type") // TMDB release type
  releaseDate  String   @map("release_date") // ISO date string
  certification String?
  createdAt    DateTime @default(now())

  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([movieId, country, releaseType])
  @@map("release_dates")
}

model Follow {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  movieId    Int        @map("movie_id")
  followType FollowType @map("follow_type")
  createdAt  DateTime   @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId, followType])
  @@map("follows")
}

model Notification {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  movieId          Int              @map("movie_id")
  notificationType NotificationType @map("notification_type")
  sentAt           DateTime         @default(now())
  emailStatus      EmailStatus      @default(SENT) @map("email_status")
  metadata         Json?

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@map("notifications")
}

enum FollowType {
  THEATRICAL
  STREAMING
  BOTH
}

enum NotificationType {
  THEATRICAL_RELEASE
  STREAMING_RELEASE
  DATE_DISCOVERED
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}